generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String?        @unique(map: "username") @db.VarChar(255)
  email         String         @unique(map: "email") @db.VarChar(255)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  profilePicUrl String?
  Subbedits     UserSubbedit[]
  Vote          Vote[]
  Comment       Comment[]
  Post          Post[]

  @@map("user")
}

model Subbedit {
  id          Int            @id @default(autoincrement())
  name        String         @unique(map: "name") @db.VarChar(255)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  description String?        
  rules       String?
  Flair       Flair[]
  Users       UserSubbedit[]
  Post        Post[]

  @@map("subbedit")
}

model UserSubbedit {
  id         Int      @id @default(autoincrement())
  userId     Int
  subbeditId Int
  joinedAt   DateTime @default(now())
  role       Role     @default(MEMBER)
  Subbedit   Subbedit @relation(fields: [subbeditId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, subbeditId])
  @@index([userId])
  @@index([subbeditId])
}

model Post {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar(255)
  body         String
  upvote       Int?      @default(0)
  commentCount Int?      @default(0)
  userId       Int
  subbeditId   Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  flairId      Int?
  mediaUrl     String?
  Vote         Vote[]
  Comment      Comment[]
  Flair        Flair?    @relation(fields: [flairId], references: [id])
  User         User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "post_ibfk_1")
  Subbedit     Subbedit  @relation(fields: [subbeditId], references: [id], onDelete: Cascade, map: "post_ibfk_2")

  @@index([subbeditId], map: "subbeditId")
  @@index([userId], map: "user_id_post")
  @@index([flairId])
  @@map("post")
}

model Comment {
  id              Int       @id @default(autoincrement())
  body            String    @db.VarChar(255)
  upvote          Int?      @default(0)
  userId          Int
  postId          Int
  parentCommentId Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Vote            Vote[]
  User            User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "comment_ibfk_1")
  Post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade, map: "comment_ibfk_2")
  Comment         Comment?  @relation("commentTocomment", fields: [parentCommentId], references: [id], map: "comment_ibfk_3")
  other_comment   Comment[] @relation("commentTocomment")

  @@index([parentCommentId], map: "parentCommentId")
  @@index([postId], map: "postId")
  @@index([userId], map: "user_id_comment")
  @@map("comment")
}

model Vote {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int?
  commentId Int?
  isUpvote  Boolean
  comment   Comment? @relation(fields: [commentId], references: [id])
  Post      Post?    @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId])
}

model Flair {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  color       String   @db.VarChar(7)
  subbeditId  Int
  createdAt   DateTime @default(now())
  subreddit   Subbedit @relation(fields: [subbeditId], references: [id])
  Post        Post[]
}

enum Role {
  CREATOR
  MODERATOR
  MEMBER
}
