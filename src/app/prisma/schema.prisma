generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id        Int            @id @default(autoincrement())
  username  String?        @unique(map: "username") @db.VarChar(255)
  email     String         @unique(map: "email") @db.VarChar(255)
  Comment   Comment[]
  Post      Post[]
  Subbedits UserSubbedit[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  Vote      Vote[]

  @@map("user")
}

model Subbedit {
  id        Int            @id @default(autoincrement())
  name      String         @unique(map: "name") @db.VarChar(255)
  Post      Post[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  Users     UserSubbedit[]
  Flair     Flair[]

  @@map("subbedit")
}

enum Role {
  CREATOR
  MODERATOR
  MEMBER
}

model UserSubbedit {
  id         Int      @id @default(autoincrement())
  userId     Int
  subbeditId Int
  joinedAt   DateTime @default(now())
  role       Role     @default(MEMBER)

  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Subbedit Subbedit @relation(fields: [subbeditId], references: [id], onDelete: Cascade)

  @@unique([userId, subbeditId])
  @@index([userId])
  @@index([subbeditId])
}

model Post {
  id           Int     @id @default(autoincrement())
  title        String  @db.VarChar(255)
  body         String  @db.Text
  upvote       Int?    @default(0)
  commentCount Int?    @default(0)
  mediaUrl     String?
  userId       Int
  subbeditId   Int
  flairId      Int?

  Flair     Flair?    @relation(fields: [flairId], references: [id])
  Comment   Comment[]
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "post_ibfk_1")
  Subbedit  Subbedit  @relation(fields: [subbeditId], references: [id], onDelete: Cascade, map: "post_ibfk_2")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Vote      Vote[]

  @@index([subbeditId], map: "subbeditId")
  @@index([userId], map: "user_id_post")
  @@index([flairId])
  @@map("post")
}

model Comment {
  id              Int       @id @default(autoincrement())
  body            String    @db.VarChar(255)
  upvote          Int?      @default(0)
  userId          Int
  postId          Int
  parentCommentId Int?
  User            User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "comment_ibfk_1")
  Post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade, map: "comment_ibfk_2")
  Comment         Comment?  @relation("commentTocomment", fields: [parentCommentId], references: [id], map: "comment_ibfk_3")
  other_comment   Comment[] @relation("commentTocomment")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Vote            Vote[]

  @@index([parentCommentId], map: "parentCommentId")
  @@index([postId], map: "postId")
  @@index([userId], map: "user_id_comment")
  @@map("comment")
}

model Vote {
  id        Int     @id @default(autoincrement())
  userId    Int
  postId    Int?
  commentId Int?
  isUpvote  Boolean

  User    User     @relation(fields: [userId], references: [id])
  Post    Post?    @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])

  @@unique([userId, postId, commentId])
}

model Flair {
  id          Int    @id @default(autoincrement())
  name        String
  description String @db.Text
  color       String @db.VarChar(7)
  subbeditId  Int

  subreddit Subbedit @relation(fields: [subbeditId], references: [id])
  createdAt DateTime @default(now())
  Post      Post[]
}
